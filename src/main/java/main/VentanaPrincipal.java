/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import arboles.ArbolAVLCapa;
import arboles.ArbolAVLUsuario;
import gramatica.LexerLectura;
import gramatica.parser;
import graphviz.*;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.StringReader;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;
import listas.FuncionesGenerarImagenesListaCapasImagen;
import listas.ListaCircularImagenes;
import listas.ListaDoblementeEnlazada;
import nodos.Nodo;
import nodos.NodoAVLCapa;
import nodos.NodoAVLUsuario;
import nodos.NodoImagen;
import nodos.NodoListaImagen;

/**
 *
 * @author grifiun
 */
public class VentanaPrincipal extends javax.swing.JFrame {
    ArbolAVLCapa arbolCapas;
    ListaCircularImagenes listadoImagenes;
    ArbolAVLUsuario arbolUsuarioAVL;
    
    
    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        initComponents();
        lienzo.setLayout(null);
        lienzo.setBackground(new java.awt.Color(255, 255, 255));
        lienzo.setBounds(10, 10, 840, 840);
        this.add(lienzo);
        lienzo.removeAll();
        lienzo.updateUI();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lienzo = new javax.swing.JPanel();
        panelOpciones = new javax.swing.JPanel();
        btnCargar = new javax.swing.JButton();
        btnBuscarArchivo = new javax.swing.JButton();
        txtNombreArchivo = new javax.swing.JTextField();
        boxImagenes = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        boxUsuarios = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        boxGeneracionImagen = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        btnGenerarImagen = new javax.swing.JButton();
        boxCapas = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        boxUsuariosImagenes = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        btnColor = new javax.swing.JButton();
        btnEfectuarCRUD = new javax.swing.JButton();
        boxCRUD = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        txtIdCRUD = new javax.swing.JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(153, 204, 255));
        setResizable(false);

        lienzo.setBackground(new java.awt.Color(255, 255, 255));
        lienzo.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lienzo.setPreferredSize(new java.awt.Dimension(841, 840));
        lienzo.setLayout(null);

        panelOpciones.setMaximumSize(new java.awt.Dimension(249, 565));
        panelOpciones.setMinimumSize(new java.awt.Dimension(249, 565));

        btnCargar.setText("Cargar");
        btnCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarActionPerformed(evt);
            }
        });

        btnBuscarArchivo.setText("Buscar");
        btnBuscarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarArchivoActionPerformed(evt);
            }
        });

        jLabel1.setText("Listado Imagenes");

        boxUsuarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxUsuariosActionPerformed(evt);
            }
        });

        jLabel2.setText("Imagenes Usuario");

        jLabel3.setText("ID CRUD");

        boxGeneracionImagen.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Capa InOrden", "Capa preOrden", "Capa postOrden", "Por Capa (lista)", "Por imagen (lista)", "Por imagen de usuario" }));

        jLabel4.setText("Carga masiva de archivos");

        btnGenerarImagen.setText("GENERAR IMAGEN");
        btnGenerarImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarImagenActionPerformed(evt);
            }
        });

        jLabel5.setText("Listado Capas");

        boxUsuariosImagenes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxUsuariosImagenesActionPerformed(evt);
            }
        });

        jLabel6.setText("Listado Usuarios");

        btnColor.setText("GENERAR GRAPHVIZ");
        btnColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnColorActionPerformed(evt);
            }
        });

        btnEfectuarCRUD.setText("Efectuar accion CRUD");
        btnEfectuarCRUD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEfectuarCRUDActionPerformed(evt);
            }
        });

        boxCRUD.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ingresar nuevo usuario", "Eliminar usuario seleccionado", "Agregar imagen", "Eliminar imagen", "Agregar imagen a usuario (L)", "Eliminar imagen a usuario (L)" }));

        jLabel7.setText("Tipo generacion imagen");

        txtIdCRUD.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        javax.swing.GroupLayout panelOpcionesLayout = new javax.swing.GroupLayout(panelOpciones);
        panelOpciones.setLayout(panelOpcionesLayout);
        panelOpcionesLayout.setHorizontalGroup(
            panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelOpcionesLayout.createSequentialGroup()
                .addGroup(panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelOpcionesLayout.createSequentialGroup()
                        .addGroup(panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelOpcionesLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(panelOpcionesLayout.createSequentialGroup()
                                        .addComponent(btnBuscarArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(6, 6, 6)
                                        .addComponent(btnCargar, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnGenerarImagen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(panelOpcionesLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel2)))
                        .addGap(0, 16, Short.MAX_VALUE))
                    .addGroup(panelOpcionesLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnColor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtNombreArchivo, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnEfectuarCRUD, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(boxCRUD, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(boxUsuarios, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(boxImagenes, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(boxUsuariosImagenes, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(boxCapas, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(panelOpcionesLayout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(boxGeneracionImagen, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtIdCRUD, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        panelOpcionesLayout.setVerticalGroup(
            panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelOpcionesLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel4)
                .addGap(12, 12, 12)
                .addComponent(txtNombreArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBuscarArchivo)
                    .addComponent(btnCargar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(boxCapas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(6, 6, 6)
                .addComponent(boxImagenes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(boxUsuarios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(boxUsuariosImagenes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(boxGeneracionImagen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnGenerarImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(75, 75, 75)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtIdCRUD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(boxCRUD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEfectuarCRUD)
                .addGap(63, 63, 63)
                .addComponent(btnColor, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lienzo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addComponent(panelOpciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lienzo, javax.swing.GroupLayout.PREFERRED_SIZE, 854, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(panelOpciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarArchivoActionPerformed
        txtNombreArchivo.setText(elegirArchivo());
        
    }//GEN-LAST:event_btnBuscarArchivoActionPerformed

    private void btnCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarActionPerformed
        String texto = txtNombreArchivo.getText();
        if(texto.equals("")){
            JOptionPane.showMessageDialog(null, "seleccione un archivo primero");
        }else{
            //obtenemos el texto del archivo
            String contenidoArchivo = leerArchivo(texto);
            String extensionArchivo = texto.substring(texto.indexOf("."), texto.length());
            System.out.println("Extension: "+extensionArchivo);
            System.out.println("El contenido del archivo es: "+contenidoArchivo);
            
            try{
                
                StringReader sr = new StringReader(contenidoArchivo);
                LexerLectura lexer = new LexerLectura(sr);
                parser pars = new parser(lexer);                                            

                try{                        
                    if(arbolCapas != null){//tiene valores
                        pars.setArbolCapasAVL(arbolCapas);//seteamos el valor
                        System.out.println("El arbol de capas no es nulo, se settea el del parser");
                    }
                    if(listadoImagenes != null){
                        pars.setListaCircularImagenes(listadoImagenes);//seteamos el valor
                    }
                    if(arbolUsuarioAVL != null){
                        pars.setArbolUsuarioAVL(arbolUsuarioAVL);
                    }
                    pars.parse();                    
                    
                    if(extensionArchivo.contains(".cap")){//es un archivo de capas.cap
                        arbolCapas = pars.getArbolCapasAVL();
                        //Setteamos el valor del arbol AVL     
                        
                        boxCapas.removeAllItems();
                        arbolCapas.agregarCapasComboBox(boxCapas);
                    }else if(extensionArchivo.contains(".im")){//imagenes
                        this.listadoImagenes = pars.getListaCircularImagenes();                       
                        
                        //REcargamos el cbox de imagenes
                        boxImagenes.removeAllItems();
                        listadoImagenes.agregarImagenesComboBox(boxImagenes);
                        
                    }else{//usuarios
                        this.arbolUsuarioAVL = pars.getArbolUsuarioAVL();
                        
                        
                        //Agregamos al box
                        boxUsuarios.removeAllItems();
                        arbolUsuarioAVL.agregarUsuariosComboBox(boxUsuarios);
                        //Agregamos el segundo box
                        agregarImagenesUsuario();
                        
                    }                          
                }catch(Exception ex){
                    System.out.println("Error en la entrada de datos");
                }  
                
            }catch(Exception ex){
                System.out.println("Error en la ejecucion de la gramatica de lectura: "+ex.getMessage());
            } 
        }
    }//GEN-LAST:event_btnCargarActionPerformed

    private void btnColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnColorActionPerformed
        // TODO add your handling code here:
        /**
        JColorChooser colorSelector = new JColorChooser();
        Color color = colorSelector.showDialog(null, "Seleccione un Color", Color.BLUE);
        String hex = "#"+Integer.toHexString(color.getRGB()).substring(2);
        System.out.println("Color: "+hex);*/
        
        
        if(arbolCapas != null){//tiene valores
            //generamos las graficas de matrices
            arbolCapas.generarGraficasMatrices(arbolCapas.getRaiz()); //Graficamos el arbol AVL
            GenerarGraficaArbolAVL graficador = new GenerarGraficaArbolAVL(arbolCapas.getRaiz());
            ////le agregamos el id de la capa
            graficador.graficar("Capas");  
            
                        
        }
        if(listadoImagenes != null){
            GenerarGraficaListadoCircularImagenes graficarImagenes = new GenerarGraficaListadoCircularImagenes(listadoImagenes.getRaiz());
            //GenerarGraficaListadoCircularImagenes graficarImagenes = new GenerarGraficaListadoCircularImagenes(null);
            graficarImagenes.graficar("Imagenes");
        }
        if(arbolUsuarioAVL != null){
            //GenerarGraficaArbolAVLUsuario graficarImagenes = new GenerarGraficaArbolAVLUsuario(arbolUsuarioAVL.getRaiz());
            //GenerarGraficaListadoCircularImagenes graficarImagenes = new GenerarGraficaListadoCircularImagenes(null);
            //graficarImagenes.graficar("Usuarios_con_imagenes");

            GenerarGraficaArbolAVL graficador = new GenerarGraficaArbolAVL(arbolUsuarioAVL.getRaiz());
            ////le agregamos el id de la capa
            graficador.graficar("Usuarios");  
        }
        
        
        JOptionPane.showMessageDialog(null, "Graficas generadas");
    }//GEN-LAST:event_btnColorActionPerformed

    private void btnGenerarImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarImagenActionPerformed
        // TODO add your handling code here:
        lienzo.removeAll();
        //lienzo.updateUI();
        int tipoGeneracion = boxGeneracionImagen.getSelectedIndex();
        /*
            0. Capa InOrden
            1. Capa preOrden
            2. Capa postOrden
            3. Por capa (arbol avl)
            4. Por imagen (lista)
            5. Por imagen de usuario
        */
        switch(tipoGeneracion){
            case 0:
                if(arbolCapas != null){
                    arbolCapas.graficarInOrden(arbolCapas.getRaiz(), lienzo);
                    
                }else{
                    JOptionPane.showMessageDialog(null, "Cargue primero las capas");
                }
                break;
            case 1:
                if(arbolCapas != null){
                    arbolCapas.graficarPreOrden(arbolCapas.getRaiz(), lienzo);
                }else{
                    JOptionPane.showMessageDialog(null, "Cargue primero las capas");
                }
                break;
            case 2:                
                if(arbolCapas != null){
                    arbolCapas.graficarPostOrden(arbolCapas.getRaiz(), lienzo);
                }else{
                    JOptionPane.showMessageDialog(null, "Cargue primero las capas");
                }
                break;
            case 3:
                if(arbolCapas != null){
                    int capaId = Integer.parseInt(boxCapas.getSelectedItem().toString());
                    //NodoAVLCapa nodoCapa = arbolCapas.buscar(capaId);
                    arbolCapas.graficarCapaId(capaId, lienzo);
                    
                }else{
                    JOptionPane.showMessageDialog(null, "Cargue primero las capas");
                }
                break;
            case 4:
                if(listadoImagenes != null){
                    int imagenId = Integer.parseInt(boxImagenes.getSelectedItem().toString());
                    NodoImagen imagenAux = listadoImagenes.buscarNodo(imagenId);
                    if(imagenAux != null){
                        if(imagenAux.getListadoCapas() != null && imagenAux.getListadoCapas().getRaiz() != null){
                            FuncionesGenerarImagenesListaCapasImagen generarImagenes = new FuncionesGenerarImagenesListaCapasImagen();
                            generarImagenes.graficar(lienzo, imagenAux.getListadoCapas().getRaiz());
                        }else{
                            JOptionPane.showMessageDialog(null, "No tiene capas");
                        }
                       
                        
                    }else{
                        System.out.println("Imagen no hallada");
                        JOptionPane.showMessageDialog(null, "Imagen no hallada");
                    }
                    
                }else{
                    JOptionPane.showMessageDialog(null, "Cargue primero las imagenes");
                }
                break;
            case 5:
                if(arbolUsuarioAVL != null && boxUsuariosImagenes.getItemCount() > 0){
                    int imagenId = Integer.parseInt(boxUsuariosImagenes.getSelectedItem().toString());
                    NodoImagen imagenAux = listadoImagenes.buscarNodo(imagenId);
                    if(imagenAux != null){
                        FuncionesGenerarImagenesListaCapasImagen generarImagenes = new FuncionesGenerarImagenesListaCapasImagen();
                        generarImagenes.graficar(lienzo, imagenAux.getListadoCapas().getRaiz());
                        
                    }else{
                        System.out.println("Imagen no hallada");
                    }
                    
                }else{
                    JOptionPane.showMessageDialog(null, "Cargue primero las imagenes del usuario y los usuarios");
                }
                break;
            
        }
        //actualizamos el lienzo
        lienzo.updateUI();
    }//GEN-LAST:event_btnGenerarImagenActionPerformed

    private void boxUsuariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxUsuariosActionPerformed
        // TODO add your handling code here:
        agregarImagenesUsuario();
        
    }//GEN-LAST:event_boxUsuariosActionPerformed

    private void agregarImagenesUsuario(){
        System.out.println("Seleccion: "+boxUsuarios.getSelectedItem());
        boxUsuariosImagenes.removeAllItems();
        try{
            NodoAVLUsuario nodoUsuarioAux = arbolUsuarioAVL.buscar(Integer.parseInt(boxUsuarios.getSelectedItem().toString()));     
            if(nodoUsuarioAux != null){
                System.out.println("Se encontro el nodo");
                if(nodoUsuarioAux.getListadoImagenesUsuario() != null){
                    nodoUsuarioAux.getListadoImagenesUsuario().agregarImagenesComboBox(boxUsuariosImagenes);
                }
            }else{  
                System.out.println("no se encontro el nodo");
            }
            
        }catch(Exception ex){
            System.out.println("No tiene imagenes");
        }
    }
    
    private void boxUsuariosImagenesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxUsuariosImagenesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_boxUsuariosImagenesActionPerformed

    private void btnEfectuarCRUDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEfectuarCRUDActionPerformed
        // TODO add your handling code here:
        int opcion = boxCRUD.getSelectedIndex();
        int idAux;
        try{
           idAux = Integer.parseInt(txtIdCRUD.getText());
        }catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(null, "El id de CRUD debe de ser un numero entero");
            idAux = 0;
        }
        
        /*
            0. Ingresar nuevo usuario
            1. Eliminar usuario seleccionado
            2. Agregar imagen
            3. Eliminar imagen
            4. Agregar imagen a usuario
            5. Eliminar imagen a usuario
        */
        switch(opcion){
            case 0:
                    if(arbolUsuarioAVL != null){                        
                       
                        NodoAVLUsuario nodoUsr = new NodoAVLUsuario(idAux, null);
                        arbolUsuarioAVL.insertar(nodoUsr);
                        
                        //Finalizamos actualizando los cbox
                        //Agregamos al box
                        boxUsuarios.removeAllItems();
                        arbolUsuarioAVL.agregarUsuariosComboBox(boxUsuarios);
                        //Agregamos el segundo box
                        agregarImagenesUsuario();
                        
                        JOptionPane.showMessageDialog(null, "Usuario creado");
                    }else{  
                        JOptionPane.showMessageDialog(null, "Cargue primero los usuarios");
                    }                
                break;    
            case 1:
                    if(arbolUsuarioAVL != null){                        
                        arbolUsuarioAVL.borrar(idAux);
                        
                        //Finalizamos actualizando los cbox
                        //Agregamos al box
                        boxUsuarios.removeAllItems();
                        arbolUsuarioAVL.agregarUsuariosComboBox(boxUsuarios);
                        //Agregamos el segundo box
                        agregarImagenesUsuario();
                        
                        JOptionPane.showMessageDialog(null, "Usuario eliminado");
                    }else{  
                        JOptionPane.showMessageDialog(null, "Cargue primero los usuarios");
                    }                
                break; 
            case 2:
                    if(listadoImagenes != null){                        
                       
                        NodoImagen nodoImagen = new NodoImagen(idAux);
                        listadoImagenes.insertarNodo(nodoImagen);
                        
                        //Finalizamos actualizando los cbox
                        //REcargamos el cbox de imagenes
                        boxImagenes.removeAllItems();
                        listadoImagenes.agregarImagenesComboBox(boxImagenes);
                        
                        JOptionPane.showMessageDialog(null, "imagen creada");
                    }else{  
                        JOptionPane.showMessageDialog(null, "Cargue primero los usuarios");
                    }
                break;
            case 3:
                    if(listadoImagenes != null){                      
                        listadoImagenes.eliminarNodo(idAux);
                        //NodoImagen nodoImagen = listadoImagenes.buscarNodo(idAux);
                        //listadoImagenes.eliminarNodo(nodoImagen);
                        
                        //Finalizamos actualizando los cbox
                        //REcargamos el cbox de imagenes
                        boxImagenes.removeAllItems();
                        listadoImagenes.agregarImagenesComboBox(boxImagenes);
                        
                        JOptionPane.showMessageDialog(null, "imagen borrada");
                    }else{  
                        JOptionPane.showMessageDialog(null, "Cargue primero las imagenes");
                    }
                break;
            case 4:
                    if(listadoImagenes != null && arbolUsuarioAVL != null){            
                        int idAuxImagen = Integer.parseInt(boxImagenes.getSelectedItem().toString());
                        NodoImagen nodoImagen = listadoImagenes.buscarNodo(idAuxImagen);
                        NodoListaImagen nodoListaImagen = new NodoListaImagen(nodoImagen.getId(), nodoImagen);
                        
                        int idAuxUsario = Integer.parseInt(boxUsuarios.getSelectedItem().toString());
                        NodoAVLUsuario nodoUsuarioAux = arbolUsuarioAVL.buscar(idAuxUsario);
                        
                        if(nodoImagen != null && nodoUsuarioAux != null){
                            nodoUsuarioAux.getListadoImagenesUsuario().insertarNodo(nodoListaImagen);
                        }
                        
                        //Finalizamos actualizando los cbox
                        //REcargamos el cbox de imagenes
                        agregarImagenesUsuario();
                        
                        JOptionPane.showMessageDialog(null, "imagen agregada al usuario");
                    }else{  
                        JOptionPane.showMessageDialog(null, "Cargue primero los usuarios");
                    }
                break;
            case 5:
                    if(listadoImagenes != null && arbolUsuarioAVL != null){            
                        int idAuxImagen = Integer.parseInt(boxImagenes.getSelectedItem().toString());
                        //NodoImagen nodoImagen = listadoImagenes.buscarNodo(idAuxImagen);
                        
                        int idAuxUsario = Integer.parseInt(boxUsuarios.getSelectedItem().toString());
                        NodoAVLUsuario nodoUsuarioAux = arbolUsuarioAVL.buscar(idAuxUsario);
                        
                        if(nodoUsuarioAux != null){
                            nodoUsuarioAux.getListadoImagenesUsuario().eliminarNodo(idAuxImagen);
                        }
                        
                        //Finalizamos actualizando los cbox
                        //REcargamos el cbox de imagenes
                        agregarImagenesUsuario();
                        
                        JOptionPane.showMessageDialog(null, "imagen removida al usuario");
                    }else{  
                        JOptionPane.showMessageDialog(null, "Cargue primero los usuarios");
                    }
                break;
                
        }
    }//GEN-LAST:event_btnEfectuarCRUDActionPerformed

    public String leerArchivo(String direccion){
        String aux = "";
        String contenidoArchivo = "";
        
        try{///se lee el archivo
            FileReader fr = new FileReader(direccion);
            BufferedReader br = new BufferedReader(fr);

            //Leemos y analizamos todaas las lineas de texto del archivo (linea por linea)
            while(aux != null){//cuando el auxiliar no sea nulo el while sigue, sera nulo cuando se termine de leer el archivo
                contenidoArchivo += aux + "\n";//agregamos la linea a una var
                aux = br.readLine();//con el ReadLine procedemos a leer la siguiente linea            
                                
            }
            //substring(0, auxMat.length() - 1) hace que se remueva el ultimo caracter agregado, que seria un "*"
           
            
        }catch(Exception e){            
            JOptionPane.showMessageDialog(null, "Archivo inexistente");
            
        } 
    
        return contenidoArchivo;
    }
    
    /**
     * Metodo que muestra un file chooser
     * @return 
     */
    private String elegirArchivo(){
        JFileChooser buscador = new JFileChooser();    
        //Agregamos un filtro al file Choser
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("TEXT FILES", "cap", "im", "usr");
        buscador.setFileFilter(filtro);
        buscador.showOpenDialog(this);
        File file;
        String archivo;
        file = buscador.getSelectedFile();
        if(file == null){
            archivo="";        
        }else{
            archivo = buscador.getSelectedFile().getAbsolutePath();  
        }
        return archivo;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> boxCRUD;
    private javax.swing.JComboBox<String> boxCapas;
    private javax.swing.JComboBox<String> boxGeneracionImagen;
    private javax.swing.JComboBox<String> boxImagenes;
    private javax.swing.JComboBox<String> boxUsuarios;
    private javax.swing.JComboBox<String> boxUsuariosImagenes;
    private javax.swing.JButton btnBuscarArchivo;
    private javax.swing.JButton btnCargar;
    private javax.swing.JButton btnColor;
    private javax.swing.JButton btnEfectuarCRUD;
    private javax.swing.JButton btnGenerarImagen;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel lienzo;
    private javax.swing.JPanel panelOpciones;
    private javax.swing.JFormattedTextField txtIdCRUD;
    private javax.swing.JTextField txtNombreArchivo;
    // End of variables declaration//GEN-END:variables
}
